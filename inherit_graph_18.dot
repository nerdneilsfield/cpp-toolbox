digraph "Graphical Class Hierarchy"
{
 // LATEX_PDF_SIZE
  bgcolor="transparent";
  edge [fontname=Helvetica,fontsize=10,labelfontname=Helvetica,labelfontsize=10];
  node [fontname=Helvetica,fontsize=10,shape=box,height=0.2,width=0.4];
  rankdir="LR";
  Node0 [id="Node000000",label="std::false_type",height=0.2,width=0.4,color="grey60", fillcolor="#E0E0E0", style="filled",tooltip=" "];
  Node0 -> Node1 [id="edge18_Node000000_Node000001",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node1 [id="Node000001",label="toolbox::functional\l::detail::has_size\<\l T, typename \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1functional_1_1detail_1_1has__size.html",tooltip="检查类型是否有size()成员函数的类型特征 / Type trait to check if type has size() member function"];
  Node0 -> Node2 [id="edge19_Node000000_Node000002",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node2 [id="Node000002",label="toolbox::functional\l::detail::is_optional\< T \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1functional_1_1detail_1_1is__optional.html",tooltip="检查T是否为std::optional的类型特征 / Type trait to check if T is a std::optional"];
  Node0 -> Node3 [id="edge20_Node000000_Node000003",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node3 [id="Node000003",label="toolbox::logger::is\l_container\< T, typename \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1logger_1_1is__container.html",tooltip="检查类型是否为容器的类型特征 / Type trait to check if a type is a container"];
  Node0 -> Node4 [id="edge21_Node000000_Node000004",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node4 [id="Node000004",label="toolbox::metrics::is\l_metric\< T \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1metrics_1_1is__metric.html",tooltip=" "];
  Node0 -> Node5 [id="edge22_Node000000_Node000005",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node5 [id="Node000005",label="toolbox::traits::detail\l::has_type_impl\< T, typename \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1traits_1_1detail_1_1has__type__impl.html",tooltip="检查类型是否具有type成员/Check if type has a type member"];
  Node0 -> Node6 [id="edge23_Node000000_Node000006",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node6 [id="Node000006",label="toolbox::traits::has\l_size\< T, typename \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1traits_1_1has__size.html",tooltip="检查类型是否有size成员/Check if type has size member"];
  Node0 -> Node7 [id="edge24_Node000000_Node000007",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node7 [id="Node000007",label="toolbox::traits::is\l_callable\< T, typename \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1traits_1_1is__callable.html",tooltip="检查类型是否可调用/Check if type is callable"];
  Node0 -> Node8 [id="edge25_Node000000_Node000008",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node8 [id="Node000008",label="toolbox::traits::is\l_greater_than_comparable\l\< T, U, typename \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1traits_1_1is__greater__than__comparable.html",tooltip="检查类型T和U是否支持大于运算符（>）/Check if types T and U support the greater-than operator (>)"];
  Node0 -> Node9 [id="edge26_Node000000_Node000009",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node9 [id="Node000009",label="toolbox::traits::is\l_iterable\< T, typename \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1traits_1_1is__iterable.html",tooltip=" "];
  Node0 -> Node10 [id="edge27_Node000000_Node000010",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node10 [id="Node000010",label="toolbox::traits::is\l_less_than_comparable\l\< T, U, typename \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1traits_1_1is__less__than__comparable.html",tooltip="检查类型T和U是否支持小于运算符（<）/Check if types T and U support the less-than operator (<)"];
  Node0 -> Node11 [id="edge28_Node000000_Node000011",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node11 [id="Node000011",label="toolbox::types::detail\l::is_calculable_container\l\< T, typename \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1types_1_1detail_1_1is__calculable__container.html",tooltip="辅助类型特征,用于检查类型是否为可计算容器 / Helper type trait to check if a type is a calculable container"];
  Node0 -> Node12 [id="edge29_Node000000_Node000012",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node12 [id="Node000012",label="toolbox::utils::detail\l::has_istream_operator\l\< T, typename \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1utils_1_1detail_1_1has__istream__operator.html",tooltip=" "];
  Node0 -> Node13 [id="edge30_Node000000_Node000013",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node13 [id="Node000013",label="toolbox::utils::detail\l::is_optional\< T \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1utils_1_1detail_1_1is__optional.html",tooltip=" "];
  Node0 -> Node14 [id="edge31_Node000000_Node000014",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node14 [id="Node000014",label="toolbox::utils::ini\l_detail::has_istream\l_operator\< T, typename \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1utils_1_1ini__detail_1_1has__istream__operator.html",tooltip=" "];
  Node0 -> Node15 [id="edge32_Node000000_Node000015",dir="back",color="steelblue1",style="solid",tooltip=" "];
  Node15 [id="Node000015",label="toolbox::utils::ini\l_detail::is_optional\< T \>",height=0.2,width=0.4,color="grey40", fillcolor="white", style="filled",URL="$structtoolbox_1_1utils_1_1ini__detail_1_1is__optional.html",tooltip=" "];
}
